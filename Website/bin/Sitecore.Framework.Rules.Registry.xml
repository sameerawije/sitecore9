<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sitecore.Framework.Rules.Registry</name>
    </assembly>
    <members>
        <member name="M:Sitecore.Framework.Rules.Registry.IRuleEntitySetTypes.Matching(System.Predicate{System.Type})">
            <summary>
            Registers all of the Rule entities that match the supplied predicate, 
            to have the next level of priority when handling overrides/replacements of entities already registered. 
            </summary>
            <param name="typePredicate">A predicate matching the target types.</param>
        </member>
        <member name="M:Sitecore.Framework.Rules.Registry.IRuleEntitySetSources.Types(System.Predicate{System.Type})">
            <summary>
            Registers all of the Rule entities that match the supplied predicate, 
            to have the next level of priority when handling overrides/replacements of entities already registered. 
            </summary>
            <param name="typePredicate">A predicate matching the target types.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,Sitecore.Framework.Common.WildcardMatch)">
            <summary>
            Include the types with a full name matching the regular expression.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="typeNamePattern">A case insenstive regular expression matching the full type name.</param>       
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.String)">
            <summary>
            Registers entities with a full type name that matches the supplied regular expression, 
            to have the next level of priority in the registry.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="typeNamePattern">A simple case insenstive wildcard expression matching the full type name. <see cref="T:Sitecore.Framework.Common.WildcardMatch"/></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Include the specified types.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="types">The target Rule Entity types.</param>        
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types``2(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Include the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types``3(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Include the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Types``4(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Include the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Type``1(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Include the specified type.
            </summary>
            <typeparam name="TRuleEntity">The target Rule Entity type.</typeparam>
            <param name="options">The current sources to filter.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Namespaces(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.Func{System.String,System.Boolean})">
            <summary>
            Include all types in the namespaces matching the predicate.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="namespacePredicate">A predicate matching the target namespaces.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Namespaces(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,Sitecore.Framework.Common.WildcardMatch)">
            <summary>
            Include all types in the namespaces matching the regular expression.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="namespacePattern">A simple case insenstive wildcard expression matching the namespace.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Namespaces(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.String)">
            <summary>
            Registers all of the Rule entities in namespaces that match the supplied regular expression, 
            to have the next level of priority when handling overrides/replacements of entities already registered.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="namespacePattern">A simple case insenstive wildcard expression matching the namespace. <see cref="T:Sitecore.Framework.Common.WildcardMatch"/></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.NamespacesOf(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.Type[])">
            <summary>
            Include all types in the namespaces of all the supplied types.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="typesInNamespaces">One or more types declared in target namespaces.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.NamespaceOf``1(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Include all types in the namespace of the supplied type.
            </summary>
            <typeparam name="TEntity">The type declared in the target namespace.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Assemblies(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Includes assemblies matching a predicate.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="assemblyPredicate">A predicate matching the target assemblies.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Assemblies(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,Sitecore.Framework.Common.WildcardMatch)">
            <summary>
            Includes the assemblies with a name matching the regex.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="assemblyNamePattern">A case insenstive string wildcard expression matching the assembly full name. <see cref="T:Sitecore.Framework.Common.WildcardMatch"/></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Assemblies(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.String)">
            <summary>
            Registers all of the Rule entities in assemblies that match the supplied regular expression, 
            to have the next level of priority when handling overrides/replacements of entities already registered.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="assemblyNamePattern">A case insenstive regular expression matching the assembly full name.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.Assemblies(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources,System.Reflection.Assembly[])">
            <summary>
            Includes the specified assemblies.
            </summary>
            <param name="options">The current sources to filter.</param>
            <param name="assemblies">The assemblies in which rule entities for the current priority will be matched.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IPriorityGroupConfigExtensions.AssemblyOf``1(Sitecore.Framework.Rules.Registry.IRuleEntitySetSources)">
            <summary>
            Includes the assembly of the supplied type.
            </summary>
            <typeparam name="TEntity">The type declared in the target assembly.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TypeScanningConfigExtensions.OmitMatching(Sitecore.Framework.Rules.TypeScanning.ITypeScanningConfig,System.String)">
            Type Blacklist
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TypeScanningConfigExtensions.Omit(Sitecore.Framework.Rules.TypeScanning.ITypeScanningConfig,System.Type[])">
            <summary>Prevents the supplied entity types from being discovered by the Rules system.</summary>
            <param name="options">The Type Scanning Config to omit entities from.</param>
            <param name="entityTypes">The types to be omitted.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TypeScanningConfigExtensions.Omit``1(Sitecore.Framework.Rules.TypeScanning.ITypeScanningConfig)">
            <summary>Prevents the supplied entity type from being discovered by the Rules system.</summary>
            <typeparam name="TEntity">The entity type to be omitted.</typeparam>
        </member>
    </members>
</doc>
